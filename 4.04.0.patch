diff --git a/.depend b/.depend
index 4513260..4bfd8ad 100644
--- a/.depend
+++ b/.depend
@@ -893,18 +893,18 @@ asmcomp/deadcode.cmo : asmcomp/reg.cmi asmcomp/proc.cmi asmcomp/mach.cmi \
 asmcomp/deadcode.cmx : asmcomp/reg.cmx asmcomp/proc.cmx asmcomp/mach.cmx \
     utils/config.cmx asmcomp/deadcode.cmi
 asmcomp/deadcode.cmi : asmcomp/mach.cmi
-asmcomp/emit.cmo : asmcomp/x86_proc.cmi asmcomp/x86_masm.cmi \
-    asmcomp/x86_gas.cmi asmcomp/x86_dsl.cmi asmcomp/x86_ast.cmi \
-    asmcomp/reg.cmi asmcomp/proc.cmi utils/misc.cmi asmcomp/mach.cmi \
-    asmcomp/linearize.cmi asmcomp/emitaux.cmi middle_end/debuginfo.cmi \
-    utils/config.cmi asmcomp/compilenv.cmi asmcomp/cmm.cmi utils/clflags.cmi \
-    asmcomp/branch_relaxation.cmi asmcomp/arch.cmo asmcomp/emit.cmi
-asmcomp/emit.cmx : asmcomp/x86_proc.cmx asmcomp/x86_masm.cmx \
-    asmcomp/x86_gas.cmx asmcomp/x86_dsl.cmx asmcomp/x86_ast.cmi \
-    asmcomp/reg.cmx asmcomp/proc.cmx utils/misc.cmx asmcomp/mach.cmx \
-    asmcomp/linearize.cmx asmcomp/emitaux.cmx middle_end/debuginfo.cmx \
-    utils/config.cmx asmcomp/compilenv.cmx asmcomp/cmm.cmx utils/clflags.cmx \
-    asmcomp/branch_relaxation.cmx asmcomp/arch.cmx asmcomp/emit.cmi
+asmcomp/emit.cmo : asmcomp/x86_proc.cmi asmcomp/x86_gas.cmi \
+    asmcomp/x86_dsl.cmi asmcomp/x86_ast.cmi asmcomp/reg.cmi asmcomp/proc.cmi \
+    utils/misc.cmi asmcomp/mach.cmi asmcomp/linearize.cmi asmcomp/emitaux.cmi \
+    middle_end/debuginfo.cmi utils/config.cmi asmcomp/compilenv.cmi \
+    asmcomp/cmm.cmi utils/clflags.cmi asmcomp/branch_relaxation.cmi \
+    asmcomp/arch.cmo asmcomp/emit.cmi
+asmcomp/emit.cmx : asmcomp/x86_proc.cmx asmcomp/x86_gas.cmx \
+    asmcomp/x86_dsl.cmx asmcomp/x86_ast.cmi asmcomp/reg.cmx asmcomp/proc.cmx \
+    utils/misc.cmx asmcomp/mach.cmx asmcomp/linearize.cmx asmcomp/emitaux.cmx \
+    middle_end/debuginfo.cmx utils/config.cmx asmcomp/compilenv.cmx \
+    asmcomp/cmm.cmx utils/clflags.cmx asmcomp/branch_relaxation.cmx \
+    asmcomp/arch.cmx asmcomp/emit.cmi
 asmcomp/emit.cmi : asmcomp/linearize.cmi asmcomp/cmm.cmi
 asmcomp/emitaux.cmo : middle_end/debuginfo.cmi utils/config.cmi \
     asmcomp/cmm.cmi utils/clflags.cmi asmcomp/arch.cmo asmcomp/emitaux.cmi
diff --git a/asmcomp/amd64/emit.mlp b/asmcomp/amd64/emit.mlp
index 85b4cee..df6ec82 100644
--- a/asmcomp/amd64/emit.mlp
+++ b/asmcomp/amd64/emit.mlp
@@ -484,6 +484,8 @@ let tailrec_entry_point = ref 0
 
 (* Emit an instruction *)
 let emit_instr fallthrough i =
+  if Debuginfo.to_line i.dbg <> None then
+    sourceline (Debuginfo.to_line i.dbg);
   emit_debug_info i.dbg;
   match i.desc with
   | Lend -> ()
@@ -892,6 +894,7 @@ let all_functions = ref []
 (* Emission of a function declaration *)
 
 let fundecl fundecl =
+  sourceline (Debuginfo.to_line fundecl.fun_dbg);
   function_name := fundecl.fun_name;
   fastcode_flag := fundecl.fun_fast;
   tailrec_entry_point := new_label();
@@ -929,6 +932,7 @@ let fundecl fundecl =
   end;
   def_label !tailrec_entry_point;
   emit_all true fundecl.fun_body;
+  sourceline (Debuginfo.to_line fundecl.fun_dbg);
   List.iter emit_call_gc !call_gc_sites;
   emit_call_bound_errors ();
   if frame_required() then begin
@@ -1124,11 +1128,15 @@ let end_assembly() =
   end;
 
   let asm =
+    match !Emitaux.asm_handler with
+    | Some f ->
+        Some f
+    | None ->
     if !Emitaux.create_asm_file then
       Some
-        (
-         (if X86_proc.masm then X86_masm.generate_asm
-          else X86_gas.generate_asm) !Emitaux.output_channel
+        (fun asm ->
+          (if X86_proc.masm then X86_masm.generate_asm
+          else X86_gas.generate_asm) !Emitaux.output_channel (List.map snd asm)
         )
     else
       None
diff --git a/asmcomp/amd64/proc.ml b/asmcomp/amd64/proc.ml
index 92f68b5..969a74b 100644
--- a/asmcomp/amd64/proc.ml
+++ b/asmcomp/amd64/proc.ml
@@ -22,7 +22,7 @@ open Cmm
 open Reg
 open Mach
 
-let fp = Config.with_frame_pointers
+let fp = ref (Config.with_frame_pointers)
 
 (* Which ABI to use *)
 
@@ -288,7 +288,7 @@ let destroyed_at_oper = function
       [| loc_spacetime_node_hole |]
   | Iswitch(_, _) -> [| rax; rdx |]
   | _ ->
-    if fp then
+    if !fp then
 (* prevent any use of the frame pointer ! *)
       [| rbp |]
     else
@@ -301,22 +301,22 @@ let destroyed_at_raise = all_phys_regs
 
 
 let safe_register_pressure = function
-    Iextcall _ -> if win64 then if fp then 7 else 8 else 0
-  | _ -> if fp then 10 else 11
+    Iextcall _ -> if win64 then if !fp then 7 else 8 else 0
+  | _ -> if !fp then 10 else 11
 
 let max_register_pressure = function
     Iextcall _ ->
       if win64 then
-        if fp then [| 7; 10 |]  else [| 8; 10 |]
+        if !fp then [| 7; 10 |]  else [| 8; 10 |]
         else
-        if fp then [| 3; 0 |] else  [| 4; 0 |]
+        if !fp then [| 3; 0 |] else  [| 4; 0 |]
   | Iintop(Idiv | Imod) | Iintop_imm((Idiv | Imod), _) ->
-    if fp then [| 10; 16 |] else [| 11; 16 |]
+    if !fp then [| 10; 16 |] else [| 11; 16 |]
   | Ialloc _ | Iintop(Icomp _) | Iintop_imm((Icomp _), _) ->
-    if fp then [| 11; 16 |] else [| 12; 16 |]
+    if !fp then [| 11; 16 |] else [| 12; 16 |]
   | Istore(Single, _, _) ->
-    if fp then [| 12; 15 |] else [| 13; 15 |]
-  | _ -> if fp then [| 12; 16 |] else [| 13; 16 |]
+    if !fp then [| 12; 15 |] else [| 13; 15 |]
+  | _ -> if !fp then [| 12; 16 |] else [| 13; 16 |]
 
 (* Pure operations (without any side effect besides updating their result
    registers). *)
@@ -340,7 +340,7 @@ let assemble_file infile outfile =
   X86_proc.assemble_file infile outfile
 
 let init () =
-  if fp then begin
+  if !fp then begin
     num_available_registers.(0) <- 12
   end else
     num_available_registers.(0) <- 13
diff --git a/asmcomp/asmgen.ml b/asmcomp/asmgen.ml
index 020732d..3339bb3 100644
--- a/asmcomp/asmgen.ml
+++ b/asmcomp/asmgen.ml
@@ -151,6 +151,7 @@ let compile_unit ~source_provenance _output_prefix asm_filename keep_asm
       if not keep_asm then remove_file asm_filename;
       raise exn
     end;
+    if !Emitaux.asm_handler = None then begin
     let assemble_result =
       Timings.(time (Assemble source_provenance))
         (Proc.assemble_file asm_filename) obj_filename
@@ -158,6 +159,7 @@ let compile_unit ~source_provenance _output_prefix asm_filename keep_asm
     if assemble_result <> 0
     then raise(Error(Assembler_error asm_filename));
     if create_asm && not keep_asm then remove_file asm_filename
+    end
   with exn ->
     remove_file obj_filename;
     raise exn
diff --git a/asmcomp/asmlibrarian.ml b/asmcomp/asmlibrarian.ml
index ca3f574..a6c8734 100644
--- a/asmcomp/asmlibrarian.ml
+++ b/asmcomp/asmlibrarian.ml
@@ -26,7 +26,7 @@ type error =
 exception Error of error
 
 let default_ui_export_info =
-  if Config.flambda then
+  if !Config.flambda then
     Cmx_format.Flambda Export_info.empty
   else
     Cmx_format.Clambda Clambda.Value_unknown
diff --git a/asmcomp/asmpackager.ml b/asmcomp/asmpackager.ml
index 6f0db06..bcf8f30 100644
--- a/asmcomp/asmpackager.ml
+++ b/asmcomp/asmpackager.ml
@@ -98,7 +98,7 @@ let make_package_object ppf members targetobj targetname coercion
   let module_ident = Ident.create_persistent targetname in
   let source_provenance = Timings.Pack targetname in
   let prefixname = Filename.remove_extension objtemp in
-  if Config.flambda then begin
+  if !Config.flambda then begin
     let size, lam = Translmod.transl_package_flambda components coercion in
     let flam =
       Middle_end.middle_end ppf
@@ -133,13 +133,13 @@ let make_package_object ppf members targetobj targetname coercion
 (* Make the .cmx file for the package *)
 
 let get_export_info ui =
-  assert(Config.flambda);
+  assert(!Config.flambda);
   match ui.ui_export_info with
   | Clambda _ -> assert false
   | Flambda info -> info
 
 let get_approx ui =
-  assert(not Config.flambda);
+  assert(not !Config.flambda);
   match ui.ui_export_info with
   | Flambda _ -> assert false
   | Clambda info -> info
@@ -167,7 +167,7 @@ let build_package_cmx members cmxfile =
            (Compilenv.unit_for_global unit_id) set)
       Compilation_unit.Set.empty units in
   let units =
-    if Config.flambda then
+    if !Config.flambda then
       List.map (fun info ->
           { info with
             ui_export_info =
@@ -181,7 +181,7 @@ let build_package_cmx members cmxfile =
   in
   let ui = Compilenv.current_unit_infos() in
   let ui_export_info =
-    if Config.flambda then
+    if !Config.flambda then
       let ui_export_info =
         List.fold_left (fun acc info ->
             Export_info.merge acc (get_export_info info))
diff --git a/asmcomp/cmmgen.ml b/asmcomp/cmmgen.ml
index fd21651..6dc7678 100644
--- a/asmcomp/cmmgen.ml
+++ b/asmcomp/cmmgen.ml
@@ -2515,7 +2515,7 @@ and transl_letrec env bindings cont =
 
 let transl_function f =
   let body =
-    if Config.flambda then
+    if !Config.flambda then
       Un_anf.apply f.body ~what:f.label
     else
       f.body
@@ -2626,7 +2626,7 @@ and emit_boxed_int64_constant n cont =
 
 let emit_constant_closure ((_, global_symb) as symb) fundecls clos_vars cont =
   let closure_symbol f =
-    if Config.flambda then
+    if !Config.flambda then
       cdefine_symbol (f.label ^ "_closure", global_symb)
     else
       []
diff --git a/asmcomp/compilenv.ml b/asmcomp/compilenv.ml
index 9847cb9..5dc9826 100644
--- a/asmcomp/compilenv.ml
+++ b/asmcomp/compilenv.ml
@@ -71,7 +71,7 @@ let exported_constants = Hashtbl.create 17
 let merged_environment = ref Export_info.empty
 
 let default_ui_export_info =
-  if Config.flambda then
+  if !Config.flambda then
     Cmx_format.Flambda Export_info.empty
   else
     Cmx_format.Clambda Value_unknown
@@ -233,7 +233,7 @@ let cache_unit_info ui =
 (* Return the approximation of a global identifier *)
 
 let get_clambda_approx ui =
-  assert(not Config.flambda);
+  assert(not !Config.flambda);
   match ui.ui_export_info with
   | Flambda _ -> assert false
   | Clambda approx -> approx
@@ -291,19 +291,19 @@ let symbol_for_global' id =
     Symbol.unsafe_create (unit_for_global id) sym_label
 
 let set_global_approx approx =
-  assert(not Config.flambda);
+  assert(not !Config.flambda);
   current_unit.ui_export_info <- Clambda approx
 
 (* Exporting and importing cross module information *)
 
 let get_flambda_export_info ui =
-  assert(Config.flambda);
+  assert(!Config.flambda);
   match ui.ui_export_info with
   | Clambda _ -> assert false
   | Flambda ei -> ei
 
 let set_export_info export_info =
-  assert(Config.flambda);
+  assert(!Config.flambda);
   current_unit.ui_export_info <- Flambda export_info
 
 let approx_for_global comp_unit =
diff --git a/asmcomp/emitaux.ml b/asmcomp/emitaux.ml
index 1149814..4359ba1 100644
--- a/asmcomp/emitaux.ml
+++ b/asmcomp/emitaux.ml
@@ -294,3 +294,4 @@ let reset () =
 
 let binary_backend_available = ref false
 let create_asm_file = ref true
+let asm_handler = ref None
diff --git a/asmcomp/emitaux.mli b/asmcomp/emitaux.mli
index 1e4addd..f657e6f 100644
--- a/asmcomp/emitaux.mli
+++ b/asmcomp/emitaux.mli
@@ -75,3 +75,5 @@ val binary_backend_available: bool ref
 
 val create_asm_file: bool ref
     (** Are we actually generating the textual assembly file? *)
+
+val asm_handler: ((int option * X86_ast.asm_line) list -> unit) option ref
diff --git a/asmcomp/x86_gas.ml b/asmcomp/x86_gas.ml
index f905dc3..0f7bdf1 100644
--- a/asmcomp/x86_gas.ml
+++ b/asmcomp/x86_gas.ml
@@ -296,7 +296,7 @@ let print_line b = function
   | External _
   | Mode386
   | Model _
-    -> assert false
+    -> ()
 
 let generate_asm oc lines =
   let b = Buffer.create 10000 in
diff --git a/asmcomp/x86_gas.mli b/asmcomp/x86_gas.mli
index 3c3a4ae..bf63a58 100644
--- a/asmcomp/x86_gas.mli
+++ b/asmcomp/x86_gas.mli
@@ -15,4 +15,5 @@
 
 (** Emit assembly instructions for gas. *)
 
+val print_line: Buffer.t -> X86_ast.asm_line -> unit
 val generate_asm: out_channel -> X86_ast.asm_line list -> unit
diff --git a/asmcomp/x86_masm.ml b/asmcomp/x86_masm.ml
index eb010b8..1b34458 100644
--- a/asmcomp/x86_masm.ml
+++ b/asmcomp/x86_masm.ml
@@ -246,7 +246,7 @@ let print_line b = function
   | Set _
   | Size _
   | Type _
-    -> assert false
+    -> ()
 
 let generate_asm oc lines =
   let b = Buffer.create 10000 in
diff --git a/asmcomp/x86_masm.mli b/asmcomp/x86_masm.mli
index 9027fe6..7e47c15 100644
--- a/asmcomp/x86_masm.mli
+++ b/asmcomp/x86_masm.mli
@@ -15,4 +15,5 @@
 
 (** Emit assembly instructions for MASM (Intel syntax). *)
 
+val print_line: Buffer.t -> X86_ast.asm_line -> unit
 val generate_asm: out_channel -> X86_ast.asm_line list -> unit
diff --git a/asmcomp/x86_proc.ml b/asmcomp/x86_proc.ml
index 30b77af..f83d1dc 100644
--- a/asmcomp/x86_proc.ml
+++ b/asmcomp/x86_proc.ml
@@ -254,22 +254,21 @@ let assemble_file infile outfile =
   | Some content -> content outfile; binary_content := None; 0
 
 let asm_code = ref []
+let curr_source_line = ref None
 
-let directive dir = asm_code := dir :: !asm_code
+let sourceline n = curr_source_line := n
+let directive dir = asm_code := (!curr_source_line, dir) :: !asm_code
 let emit ins = directive (Ins ins)
 
 let reset_asm_code () = asm_code := []
 
 let generate_code asm =
   let instrs = List.rev !asm_code in
-  let instrs =
-    List.fold_left (fun instrs pass -> pass instrs) instrs !assembler_passes
-  in
   begin match asm with
   | Some f -> f instrs
   | None -> ()
   end;
   begin match !internal_assembler with
-  | Some f -> binary_content := Some (f instrs)
+  | Some f -> binary_content := Some (f (List.map snd instrs))
   | None -> binary_content := None
   end
diff --git a/asmcomp/x86_proc.mli b/asmcomp/x86_proc.mli
index 388420b..c709fd2 100644
--- a/asmcomp/x86_proc.mli
+++ b/asmcomp/x86_proc.mli
@@ -36,13 +36,14 @@ val buf_bytes_directive:
 
 (** Buffer of assembly code *)
 
+val sourceline: int option -> unit
 val emit: instruction -> unit
 val directive: asm_line -> unit
 val reset_asm_code: unit -> unit
 
 (** Code emission *)
 
-val generate_code: (X86_ast.asm_line list -> unit) option -> unit
+val generate_code: ((int option * X86_ast.asm_line) list -> unit) option -> unit
   (** Post-process the stream of instructions.  Dump it (using
       the provided syntax emitter) in a file (if provided) and
       compile it with an internal assembler (if registered
diff --git a/bytecomp/translattribute.ml b/bytecomp/translattribute.ml
index fae55cc..006445a 100644
--- a/bytecomp/translattribute.ml
+++ b/bytecomp/translattribute.ml
@@ -23,15 +23,15 @@ let is_inline_attribute = function
 
 let is_inlined_attribute = function
   | {txt=("inlined"|"ocaml.inlined")}, _ -> true
-  | {txt=("unrolled"|"ocaml.unrolled")}, _ when Config.flambda -> true
+  | {txt=("unrolled"|"ocaml.unrolled")}, _ when !Config.flambda -> true
   | _ -> false
 
 let is_specialise_attribute = function
-  | {txt=("specialise"|"ocaml.specialise")}, _ when Config.flambda -> true
+  | {txt=("specialise"|"ocaml.specialise")}, _ when !Config.flambda -> true
   | _ -> false
 
 let is_specialised_attribute = function
-  | {txt=("specialised"|"ocaml.specialised")}, _ when Config.flambda -> true
+  | {txt=("specialised"|"ocaml.specialised")}, _ when !Config.flambda -> true
   | _ -> false
 
 let find_attribute p attributes =
diff --git a/bytecomp/translobj.ml b/bytecomp/translobj.ml
index 67f469c..d8400a4 100644
--- a/bytecomp/translobj.ml
+++ b/bytecomp/translobj.ml
@@ -111,7 +111,7 @@ let transl_label_init_general f =
   expr, size
 
 let transl_label_init_flambda f =
-  assert(Config.flambda);
+  assert(!Config.flambda);
   let method_cache_id = Ident.create "method_cache" in
   method_cache := Lvar method_cache_id;
   (* Calling f (usualy Translmod.transl_struct) requires the
@@ -130,7 +130,7 @@ let transl_label_init_flambda f =
   transl_label_init_general (fun () -> expr, size)
 
 let transl_store_label_init glob size f arg =
-  assert(not Config.flambda);
+  assert(not !Config.flambda);
   assert(!Clflags.native_code);
   method_cache := Lprim(Pfield size,
                         [Lprim(Pgetglobal glob, [], Location.none)],
diff --git a/driver/optcompile.ml b/driver/optcompile.ml
index 991b9f5..f61c30c 100644
--- a/driver/optcompile.ml
+++ b/driver/optcompile.ml
@@ -83,7 +83,7 @@ let implementation ~backend ppf sourcefile outputprefix =
           Printtyped.implementation_with_coercion
     in
     if not !Clflags.print_types then begin
-      if Config.flambda then begin
+      if !Config.flambda then begin
         if !Clflags.classic_inlining then begin
           Clflags.default_simplify_rounds := 1;
           Clflags.use_inlining_arguments_set Clflags.classic_arguments;
diff --git a/middle_end/debuginfo.ml b/middle_end/debuginfo.ml
index a93f425..047dbd4 100644
--- a/middle_end/debuginfo.ml
+++ b/middle_end/debuginfo.ml
@@ -94,3 +94,8 @@ let compare dbg1 dbg2 =
       loop ds1 ds2
   in
   loop (List.rev dbg1) (List.rev dbg2)
+
+(** OCAML-EXPLORER *)
+let to_line = function
+  | [] -> None
+  | {dinfo_line; _} :: _ -> Some dinfo_line
diff --git a/middle_end/debuginfo.mli b/middle_end/debuginfo.mli
index 993928c..d14bdd2 100644
--- a/middle_end/debuginfo.mli
+++ b/middle_end/debuginfo.mli
@@ -37,3 +37,6 @@ val concat: t -> t -> t
 val inline: Location.t -> t -> t
 
 val compare : t -> t -> int
+
+(** OCAML-EXPLORER *)
+val to_line : t -> int option
diff --git a/utils/clflags.ml b/utils/clflags.ml
index bd88487..1178133 100644
--- a/utils/clflags.ml
+++ b/utils/clflags.ml
@@ -166,7 +166,7 @@ let rounds () =
   | None -> !default_simplify_rounds
   | Some r -> r
 
-let default_inline_threshold = if Config.flambda then 10. else 10. /. 8.
+let default_inline_threshold = if !Config.flambda then 10. else 10. /. 8.
 let inline_toplevel_multiplier = 16
 let default_inline_toplevel_threshold =
   int_of_float ((float inline_toplevel_multiplier) *. default_inline_threshold)
diff --git a/utils/config.mli b/utils/config.mli
index 9b05005..6a3c9c4 100644
--- a/utils/config.mli
+++ b/utils/config.mli
@@ -136,7 +136,7 @@ val target : string
 
 val print_config : out_channel -> unit;;
 
-val flambda : bool
+val flambda : bool ref
         (* Whether the compiler was configured for flambda *)
 
 val spacetime : bool
diff --git a/utils/config.mlp b/utils/config.mlp
index e821ef0..2ccfb5a 100644
--- a/utils/config.mlp
+++ b/utils/config.mlp
@@ -67,7 +67,7 @@ let mkdll, mkexe, mkmaindll =
   else
     "%%MKDLL%%", "%%MKEXE%%", "%%MKMAINDLL%%"
 
-let flambda = %%FLAMBDA%%
+let flambda = ref %%FLAMBDA%%
 let safe_string = %%SAFE_STRING%%
 
 let exec_magic_number = "Caml1999X011"
@@ -75,12 +75,12 @@ and cmi_magic_number = "Caml1999I021"
 and cmo_magic_number = "Caml1999O011"
 and cma_magic_number = "Caml1999A012"
 and cmx_magic_number =
-  if flambda then
+  if !flambda then
     "Caml1999Y016"
   else
     "Caml1999Y015"
 and cmxa_magic_number =
-  if flambda then
+  if !flambda then
     "Caml1999Z015"
   else
     "Caml1999Z014"
@@ -161,7 +161,7 @@ let print_config oc =
   p_bool "systhread_supported" systhread_supported;
   p "host" host;
   p "target" target;
-  p_bool "flambda" flambda;
+  p_bool "flambda" !flambda;
   p_bool "spacetime" spacetime;
   p_bool "safe_string" safe_string;
 
