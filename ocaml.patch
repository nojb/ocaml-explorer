diff --git a/.depend b/.depend
index 4513260..4bfd8ad 100644
--- a/.depend
+++ b/.depend
@@ -893,18 +893,18 @@ asmcomp/deadcode.cmo : asmcomp/reg.cmi asmcomp/proc.cmi asmcomp/mach.cmi \
 asmcomp/deadcode.cmx : asmcomp/reg.cmx asmcomp/proc.cmx asmcomp/mach.cmx \
     utils/config.cmx asmcomp/deadcode.cmi
 asmcomp/deadcode.cmi : asmcomp/mach.cmi
-asmcomp/emit.cmo : asmcomp/x86_proc.cmi asmcomp/x86_masm.cmi \
-    asmcomp/x86_gas.cmi asmcomp/x86_dsl.cmi asmcomp/x86_ast.cmi \
-    asmcomp/reg.cmi asmcomp/proc.cmi utils/misc.cmi asmcomp/mach.cmi \
-    asmcomp/linearize.cmi asmcomp/emitaux.cmi middle_end/debuginfo.cmi \
-    utils/config.cmi asmcomp/compilenv.cmi asmcomp/cmm.cmi utils/clflags.cmi \
-    asmcomp/branch_relaxation.cmi asmcomp/arch.cmo asmcomp/emit.cmi
-asmcomp/emit.cmx : asmcomp/x86_proc.cmx asmcomp/x86_masm.cmx \
-    asmcomp/x86_gas.cmx asmcomp/x86_dsl.cmx asmcomp/x86_ast.cmi \
-    asmcomp/reg.cmx asmcomp/proc.cmx utils/misc.cmx asmcomp/mach.cmx \
-    asmcomp/linearize.cmx asmcomp/emitaux.cmx middle_end/debuginfo.cmx \
-    utils/config.cmx asmcomp/compilenv.cmx asmcomp/cmm.cmx utils/clflags.cmx \
-    asmcomp/branch_relaxation.cmx asmcomp/arch.cmx asmcomp/emit.cmi
+asmcomp/emit.cmo : asmcomp/x86_proc.cmi asmcomp/x86_gas.cmi \
+    asmcomp/x86_dsl.cmi asmcomp/x86_ast.cmi asmcomp/reg.cmi asmcomp/proc.cmi \
+    utils/misc.cmi asmcomp/mach.cmi asmcomp/linearize.cmi asmcomp/emitaux.cmi \
+    middle_end/debuginfo.cmi utils/config.cmi asmcomp/compilenv.cmi \
+    asmcomp/cmm.cmi utils/clflags.cmi asmcomp/branch_relaxation.cmi \
+    asmcomp/arch.cmo asmcomp/emit.cmi
+asmcomp/emit.cmx : asmcomp/x86_proc.cmx asmcomp/x86_gas.cmx \
+    asmcomp/x86_dsl.cmx asmcomp/x86_ast.cmi asmcomp/reg.cmx asmcomp/proc.cmx \
+    utils/misc.cmx asmcomp/mach.cmx asmcomp/linearize.cmx asmcomp/emitaux.cmx \
+    middle_end/debuginfo.cmx utils/config.cmx asmcomp/compilenv.cmx \
+    asmcomp/cmm.cmx utils/clflags.cmx asmcomp/branch_relaxation.cmx \
+    asmcomp/arch.cmx asmcomp/emit.cmi
 asmcomp/emit.cmi : asmcomp/linearize.cmi asmcomp/cmm.cmi
 asmcomp/emitaux.cmo : middle_end/debuginfo.cmi utils/config.cmi \
     asmcomp/cmm.cmi utils/clflags.cmi asmcomp/arch.cmo asmcomp/emitaux.cmi
diff --git a/asmcomp/amd64/emit.mlp b/asmcomp/amd64/emit.mlp
index 85b4cee..a60b1c1 100644
--- a/asmcomp/amd64/emit.mlp
+++ b/asmcomp/amd64/emit.mlp
@@ -484,6 +484,8 @@ let tailrec_entry_point = ref 0
 
 (* Emit an instruction *)
 let emit_instr fallthrough i =
+  if Debuginfo.to_line i.dbg <> None then
+    sourceline (Debuginfo.to_line i.dbg);
   emit_debug_info i.dbg;
   match i.desc with
   | Lend -> ()
@@ -892,6 +894,7 @@ let all_functions = ref []
 (* Emission of a function declaration *)
 
 let fundecl fundecl =
+  sourceline (Debuginfo.to_line fundecl.fun_dbg);
   function_name := fundecl.fun_name;
   fastcode_flag := fundecl.fun_fast;
   tailrec_entry_point := new_label();
@@ -929,6 +932,7 @@ let fundecl fundecl =
   end;
   def_label !tailrec_entry_point;
   emit_all true fundecl.fun_body;
+  sourceline (Debuginfo.to_line fundecl.fun_dbg);
   List.iter emit_call_gc !call_gc_sites;
   emit_call_bound_errors ();
   if frame_required() then begin
@@ -1124,11 +1128,16 @@ let end_assembly() =
   end;
 
   let asm =
+    match !Emitaux.asm_handler with
+    | Some f ->
+        if X86_proc.masm then Some (f X86_masm.print_line)
+        else Some (f X86_gas.print_line)
+    | None ->
     if !Emitaux.create_asm_file then
       Some
-        (
-         (if X86_proc.masm then X86_masm.generate_asm
-          else X86_gas.generate_asm) !Emitaux.output_channel
+        (fun asm ->
+          (if X86_proc.masm then X86_masm.generate_asm
+          else X86_gas.generate_asm) !Emitaux.output_channel (List.map snd asm)
         )
     else
       None
diff --git a/asmcomp/amd64/proc.ml b/asmcomp/amd64/proc.ml
index 92f68b5..969a74b 100644
--- a/asmcomp/amd64/proc.ml
+++ b/asmcomp/amd64/proc.ml
@@ -22,7 +22,7 @@ open Cmm
 open Reg
 open Mach
 
-let fp = Config.with_frame_pointers
+let fp = ref (Config.with_frame_pointers)
 
 (* Which ABI to use *)
 
@@ -288,7 +288,7 @@ let destroyed_at_oper = function
       [| loc_spacetime_node_hole |]
   | Iswitch(_, _) -> [| rax; rdx |]
   | _ ->
-    if fp then
+    if !fp then
 (* prevent any use of the frame pointer ! *)
       [| rbp |]
     else
@@ -301,22 +301,22 @@ let destroyed_at_raise = all_phys_regs
 
 
 let safe_register_pressure = function
-    Iextcall _ -> if win64 then if fp then 7 else 8 else 0
-  | _ -> if fp then 10 else 11
+    Iextcall _ -> if win64 then if !fp then 7 else 8 else 0
+  | _ -> if !fp then 10 else 11
 
 let max_register_pressure = function
     Iextcall _ ->
       if win64 then
-        if fp then [| 7; 10 |]  else [| 8; 10 |]
+        if !fp then [| 7; 10 |]  else [| 8; 10 |]
         else
-        if fp then [| 3; 0 |] else  [| 4; 0 |]
+        if !fp then [| 3; 0 |] else  [| 4; 0 |]
   | Iintop(Idiv | Imod) | Iintop_imm((Idiv | Imod), _) ->
-    if fp then [| 10; 16 |] else [| 11; 16 |]
+    if !fp then [| 10; 16 |] else [| 11; 16 |]
   | Ialloc _ | Iintop(Icomp _) | Iintop_imm((Icomp _), _) ->
-    if fp then [| 11; 16 |] else [| 12; 16 |]
+    if !fp then [| 11; 16 |] else [| 12; 16 |]
   | Istore(Single, _, _) ->
-    if fp then [| 12; 15 |] else [| 13; 15 |]
-  | _ -> if fp then [| 12; 16 |] else [| 13; 16 |]
+    if !fp then [| 12; 15 |] else [| 13; 15 |]
+  | _ -> if !fp then [| 12; 16 |] else [| 13; 16 |]
 
 (* Pure operations (without any side effect besides updating their result
    registers). *)
@@ -340,7 +340,7 @@ let assemble_file infile outfile =
   X86_proc.assemble_file infile outfile
 
 let init () =
-  if fp then begin
+  if !fp then begin
     num_available_registers.(0) <- 12
   end else
     num_available_registers.(0) <- 13
diff --git a/asmcomp/emitaux.ml b/asmcomp/emitaux.ml
index 1149814..4359ba1 100644
--- a/asmcomp/emitaux.ml
+++ b/asmcomp/emitaux.ml
@@ -294,3 +294,4 @@ let reset () =
 
 let binary_backend_available = ref false
 let create_asm_file = ref true
+let asm_handler = ref None
diff --git a/asmcomp/emitaux.mli b/asmcomp/emitaux.mli
index 1e4addd..768bcae 100644
--- a/asmcomp/emitaux.mli
+++ b/asmcomp/emitaux.mli
@@ -75,3 +75,5 @@ val binary_backend_available: bool ref
 
 val create_asm_file: bool ref
     (** Are we actually generating the textual assembly file? *)
+
+val asm_handler: ((Buffer.t -> X86_ast.asm_line -> unit) -> (int option * X86_ast.asm_line) list -> unit) option ref
diff --git a/asmcomp/x86_gas.mli b/asmcomp/x86_gas.mli
index 3c3a4ae..bf63a58 100644
--- a/asmcomp/x86_gas.mli
+++ b/asmcomp/x86_gas.mli
@@ -15,4 +15,5 @@
 
 (** Emit assembly instructions for gas. *)
 
+val print_line: Buffer.t -> X86_ast.asm_line -> unit
 val generate_asm: out_channel -> X86_ast.asm_line list -> unit
diff --git a/asmcomp/x86_masm.mli b/asmcomp/x86_masm.mli
index 9027fe6..7e47c15 100644
--- a/asmcomp/x86_masm.mli
+++ b/asmcomp/x86_masm.mli
@@ -15,4 +15,5 @@
 
 (** Emit assembly instructions for MASM (Intel syntax). *)
 
+val print_line: Buffer.t -> X86_ast.asm_line -> unit
 val generate_asm: out_channel -> X86_ast.asm_line list -> unit
diff --git a/asmcomp/x86_proc.ml b/asmcomp/x86_proc.ml
index 30b77af..f83d1dc 100644
--- a/asmcomp/x86_proc.ml
+++ b/asmcomp/x86_proc.ml
@@ -254,22 +254,21 @@ let assemble_file infile outfile =
   | Some content -> content outfile; binary_content := None; 0
 
 let asm_code = ref []
+let curr_source_line = ref None
 
-let directive dir = asm_code := dir :: !asm_code
+let sourceline n = curr_source_line := n
+let directive dir = asm_code := (!curr_source_line, dir) :: !asm_code
 let emit ins = directive (Ins ins)
 
 let reset_asm_code () = asm_code := []
 
 let generate_code asm =
   let instrs = List.rev !asm_code in
-  let instrs =
-    List.fold_left (fun instrs pass -> pass instrs) instrs !assembler_passes
-  in
   begin match asm with
   | Some f -> f instrs
   | None -> ()
   end;
   begin match !internal_assembler with
-  | Some f -> binary_content := Some (f instrs)
+  | Some f -> binary_content := Some (f (List.map snd instrs))
   | None -> binary_content := None
   end
diff --git a/asmcomp/x86_proc.mli b/asmcomp/x86_proc.mli
index 388420b..c709fd2 100644
--- a/asmcomp/x86_proc.mli
+++ b/asmcomp/x86_proc.mli
@@ -36,13 +36,14 @@ val buf_bytes_directive:
 
 (** Buffer of assembly code *)
 
+val sourceline: int option -> unit
 val emit: instruction -> unit
 val directive: asm_line -> unit
 val reset_asm_code: unit -> unit
 
 (** Code emission *)
 
-val generate_code: (X86_ast.asm_line list -> unit) option -> unit
+val generate_code: ((int option * X86_ast.asm_line) list -> unit) option -> unit
   (** Post-process the stream of instructions.  Dump it (using
       the provided syntax emitter) in a file (if provided) and
       compile it with an internal assembler (if registered
diff --git a/middle_end/debuginfo.ml b/middle_end/debuginfo.ml
index a93f425..047dbd4 100644
--- a/middle_end/debuginfo.ml
+++ b/middle_end/debuginfo.ml
@@ -94,3 +94,8 @@ let compare dbg1 dbg2 =
       loop ds1 ds2
   in
   loop (List.rev dbg1) (List.rev dbg2)
+
+(** OCAML-EXPLORER *)
+let to_line = function
+  | [] -> None
+  | {dinfo_line; _} :: _ -> Some dinfo_line
diff --git a/middle_end/debuginfo.mli b/middle_end/debuginfo.mli
index 993928c..d14bdd2 100644
--- a/middle_end/debuginfo.mli
+++ b/middle_end/debuginfo.mli
@@ -37,3 +37,6 @@ val concat: t -> t -> t
 val inline: Location.t -> t -> t
 
 val compare : t -> t -> int
+
+(** OCAML-EXPLORER *)
+val to_line : t -> int option
